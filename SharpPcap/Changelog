Changelog
v2.4.0 - TDB
- Fix a long standing bug on mono/unix platforms where the capture loop wasn't
  stopping when capturing on inactive or very low traffic adapters. The issue is that
  pcap_dispatch()/pcap_next()/pcap_next_ex()/pcap_loop() call read() on a
  device without a timeout. The read sleeps until a packet arrives or a signal
  occurs, which may be a long time or forever on certain adapters as they may be
  inactive or on low activity networks etc. When the user attempts to stop the
  capturing the Thread.Join() waiting for the capture thread will timeout because
  the read() is still sleeping.

  Avoid the issue entirely when Mono.Posix is available by using Mono.Unix.Native.Syscall.poll()
  to check for available data. If data is available we call pcap_dispatch()/pcap_next()/...
  and if not we loop, checking to see if the capture thread has been asked to terminate.

  If Mono.Posix isn't available we fall back to the old way where we hope that a packet
  arrives. This may hang an application on shutdown though if teh capture thread isn't terminated
  but there isn't a real easy way to work around that that I'm aware of.
  
v2.3.0 - 20100101
- Expose PcapOfflineDevice(string pcapFileName) constructor and document the
  Pcap.GetPcapOfflineDevice() method.
- Update tests and examples to use the new PcapOfflineDevice() constructor
- IPPacket add caching of the source and destination addresses
- Re-add support for the winpcap extension method, pcap_setbuff() that enables the application
  define the kernel adapter buffer size

v2.2.0 - 20091226
- API changes:
   - Add support for pcap_stats() via PcapDevice.Statistics() that returns an instance
     of PcapStatistics.
   - Move EtherType out of class EthernetPacket and into EthernetPacketType.cs, changing
     its name to public enum EthernetPacketType : ushort. Synchronize it with Pcap.Net
   - Switch PcapDeviceList to a singleton. Access the PcapDeviceList via
     PcapDeviceList.Instance. Change fixes an issue seen by Matthew Brown where
     a capture was started on a PcapDevice but because the PcapDevice was retrieved
     again before calling PcapDevice.StopCapture() the StopCapture call was on
     different PcapDevice instance which had no record of capture being started.
     With a static PcapDeviceList, retrieving a list of PcapDevices will almost
     always return the same instances of PcapDevices, except if devices are removed
     or added.
   - Add a method to bypass the PcapDeviceList singleton, PcapDeviceList.New()
     for cases when the user wants to open the same physical device multiple times
     in order to apply multiple filters to the same physical device.
   - Rework RawaPacket and add RawPacket methods to PcapDevice that allow the user
     to retrieve an unprocessed packet.
   - Make Sockadd(IntPtr sockaddrPtr) constructor internal
   - Rewrite class Timeval to match the improved version in Packet.Net.
   - Removed the IPPort class, the strings were just copies of the IPPorts values
   - Change IPPorts to use an enum of type ushort and rework the port names to include
     only the most frequently used ports. We'll add more ports as users request them.
   - Rewrite public struct LinkLayers_Fields to public enum LinkLayers and correct
     the capitalization of the enum values.

- PcapDevice.SetFilter() now checks if the device is open before calling lower level
  functions that rely on an open device. A PcapDeviceNotReadyException is thrown
  in the case when the device isn't open instead of a segfault.

- Fix a bug in PcapDeviceList.GetDevices() pointed out by Ashley Ross. Fixes an issue
  where the devices in the device list would lack the supplimental NetworkInterface
  information until subsequent refreshes.

- XML source code documentation is now enabled and the .xml file is included
  in the binary release package.

- XML source code documentation improvements to several classes and methods.

- Access to properties in PcapInterface, PcapAddress and PcapOfflineDevice has
  been tightened up to only allow read-only access to most properties. These
  properties cannot be modified via SharpPcap and letting a user modify them is
  just asking for trouble since SharpPcap uses some values for comparisons.

- Add value constructors to EthernetPacket, IPPacket and TCPPacket so these
  packets may be constructed using values. This should simplify the creation
  of packets from scratch. Longer term plans are to move the packet parsing and
  generation code to the Packet.Net project, http://packetnet.sf.net 

- Upgrade the internal copy of NUnit from 2.2.8 to 2.4.7

- Whitespace fixes to indentation in several files.

v2.1.2 - 20091007
- Switch from throwing exceptions in the constructor to using
  public virtual bool Packet.IsValid(out string errorString). Throwing from packet constructors
  means that we can't use packet classes to build packets, the memory may be all zeros and invalid
  and since the constructor would throw we wouldn't have the opportunity to make the
  memory valid using the classes accessors. Hopefully this will resolve the invalid IPPacket issue
  in a reasonable manner.
- Add very basic validation to IPv4Packet's constructor that throws a PcapException if
  the validation fails. SharpPcap wasn't catching an IPv4 packet with a total length
  less than the ip header length so the user could try operating on this invalid packet
  and then get marshalling or other exceptions far after the reception of the packet.
  Also implement a unit test for this case in InvalidPacketTest.cs.
  Thanks to John Barett for nailing down the offending packet in Wireshark.
- Fixed a crash when using SharpPcap on 64bit Windows. Cause was a marshalling issue with pcap_pkthdr due to
  longs being 32bit on Windows. Thanks to Jon Pryor for help in debugging this.
- Migrated from svn to git using directions from http://blog.antoniac.name/2009/05/sourceforgenet-migrating-from-svn-to.html
- Added byte[] TCPPacket.Options so users can retrieve the list of options
  for a given tcp packet
- Convert.BytesToHex() wasn't taking the starting index into consideration. Bug
  and patch reported by Evan Plaice.
- Simplify Convert.BytesToHex() using ToString("X2") 
- Add string PcapInterface.FriendlyName that contains the
  System.Net.NetworkInformation.NetworkInterface.Name for the interface.
  This provides useful information on Windows as it contains a human readable
  name for the device.
  Patch from Stefan Agner.
- Add support for setting/clearing non-blocking mode on PcapDevices via the
  PcapDevice.NonBlockingMode accessor
  Patch from Stefan Agner.
- Assign svn:eol-style native to newly created files. This reduces conflicts due to line
  ending characters when editing files between Windows and Linux/Unix

v2.1.1 - 20090508
- Terminate the capture loop when no more packets can be read from a PcapOfflineDevice, a
  file on disk. Change enables example 8 run to completion instead of hanging on the
  device.Capture() call.
  Bug reported by Makoto Nakamura.
- Enable multiple Start/StopCapture() calls by properly setting PcapDevice.captureThread to
  null in PcapDevice.StopCapture().
  Bug reported by Makoto Nakamura.
- Fix segfault when calling Pcap.Version by changing the signature of the pinvoke 
  or pcap_get_version() from 'string pcap_get_version()' to 'IntPtr pcap_get_version()'.
  Otherwise the .net runtime attempts to free the 'const char*' returned by pcap_get_version()
  and we get a segfault. Add a unit test that retrieves Pcap.Version.
  Bug reported by Makoto Nakamura.

v2.1.0 - 20090504
- Change version to 2.1.0 in preparation for release. The minor version bump from 0
  to 1 is due to api changes in this release.
- Use System.Net.NetworkInformation to help retrieve mac addresses for devices.
  Adapter mac addresses are one area where Pcap and WinPcap differ and where there
  are also differences across multiple platforms.

  Modify Sockaddr.hardwareAddress to be a
  System.Net.NetworkInformation.PhysicalAddress instead of a byte[].

  Add code to PcapDeviceList() to retrieve the list of
  NetworkInterfaces and use the PhysicalAddress value to update the
  PcapInterface.MacAddress value.

  Add a PcapAddress m_macAddress member to PcapInterface. If the
  PcapInterface has a hardware address in its List<PcapAddress>
  Addresses m_macAddress will be a reference to this entry.

  Add a PhysicalAddress MacAddress accessor to PcapInterface. This makes
  it easy for the user to get the mac address of a device without having
  to search through the address list. The get accessor returns the
  PcapAddress.Addr.hardwareAddress, which is now a PhysicalAddress since
  Addr is a Sockaddr. The set accessor either updates the existing entry
  if m_macAddress is not null, or, if m_macAddress is null, it creates a
  new PcapAddress entry, adds it to the PcapInterface's Addresses and
  then points m_macAddress at the new entry.
- Remove some last usage of the MACAddress class and replace it with
  System.Net.NetworkInformation.PhysicalAddress. Remove some helper methods
  in IPUtil that were performing conversion to/from strings and mac addresses.
  Remove some ARPPacket methods for setting hardware addresses from long values,
  the set accessors for these variables works just fine.
- Switch some representations of mac addresses from strings to the
  System.Net.NetworkInformation.PhysicalAddress class
- Move Pcap.PcapAddress, Pcap.Sockaddr, Pcap.PcapInterface and PcapDevice classes into their
  own files
- Add the PcapDevice that generated the event to the PcapCaptureEventArgs
  and the PcapStatisticsEventArgs classes
- Fix a very difficult to debug race condition in PacketFactory that was
  brought out by having several devices capturing simultaneously. PacketFactory had a
  private static lLen that was being set and used in static PacketFactory.dataToPacket().
  This is a really bad thing because static PacketFactory.dataToPacket()
  may be called by several threads at the same time. Depending on timing, the value
  of PacketFactory.lLen be set by one call to dataToPacket() and modified by another
  call to dataToPacket() before the first call uses the value. Because this is a
  race condition it doesn't always reproduce and the failure case was an odd
  error from the IPPacket.SourceAddress get accessor. Eliminate the race condition
  by moving from a PacketFactory.lLen static variable to a method local lLen variable.
- Re-remove the NetworkDevice and IPHelper classes from SharpPcap/Win32. It turns
  out that System.Net.NetworkInformation's NetworkInterface can provide the
  mac address for the network devices on the system.
- Throw a PcapDeviceNotReadyException() if a capture loop is started before the
  PcapDevice is opened. Patch from Phillip L.
- Re-add the NetworkDevice and IPHelper classes to SharpPcap/Win32 and into the
  SharpPcap.Win32 namespace. Windows only users can use these classes at their own
  risk of breaking portability if their code is executed on a non-Windows platform.
- Add PcapDevices finalizer, call Close() in the destructor. Remove some duplicate
  p/Invoke calls. Don't expose generic lists. Add some specific exceptions to avoid
  throwing generic ones. Check some method results. Patch by Phillip L.
- Fix bad spelling and grammar. Use LastError propery instead of duplicating pinvoke 
  calls. Patch by Phillip L.
- Deprecate Pcap.GetAllDevices() and introduce a new type, PcapDeviceList that is a
  ReadOnlyCollection<PcapDevice>. Patch from Phill L.
- Add static bool PcapDevice.CheckFilter(string filterExpression, out string errorString) 
  to enable the checking of filters before setting them
- Split capture thread out of PcapDevice.cs and into PcapDeviceCaptureLoop.cs
- Switch from pcap_loop()/pcap_breakloop() to pcap_dispatch() in preparation for Linux
  platform specific capture code.
- Remove duplicate and unnecessary 'using' statements, patch from Phill L.
- Enable generation of xml documentation. Enable overflow checking in debug build. Patch from
  Phill L.
- Add a UDPPacket unit test, UDPPacketTest.cs. Test the length of the byte[]
  returned by UDPPacket.UDPData.
- Add UDPPacket override of HeaderLength. Also add a PayloadDataLength accessor and a 
  UDPHeaderLength accessor to match TCPPacket.
- Switch to using Array.Copy() in UDPPacket.UDPData
- Add Header and HeaderLength property overrides to the IPPacket class otherwise a
  polymorphic Packet instance won't behave properly for IPPackets
- Remove IPv4Packet.IpHeaderLength, we already have IPv4Packet.IPHeaderLength
- Move capture loop and thread synchronization over to pcap by using pcap_loop()/pcap_breakloop(),
  patch from Phill L.
- Fix get accessor of ARPPacket.ARPTargetProtoAddress to use the target protocol address
  position, ARP_T_PR_ADDR_POS instead of ARP_S_PR_ADDR_POS, the source protocol address
  position. Bug reported by Houmin Li.
- Move Test/ArpTest.cs to Example 2. Add a new arp packet test, ArpPacketTest.cs that tests
  parsing a arp request and response.
- PcapDevice.GetNextPacket() should check if the device is opened before attempting to 
  use the PcapHandle and throw an exception if the device isn't opened. Fixes an 
  unmanaged segfault that can occur when calling PcapDevice.GetNextPacket() on a 
  closed device
- Phill L. mentioned that Example2 is the same as Example 1, removed Example 2
- Patch from Phill L. to use event handlers as recommended by http://msdn.microsoft.com/en-us/ms182133.aspx
  for packet arrival and statistics events
- Move pinvoke declarations to SafeNativeMethods.cs per a suggestion from Phill L. to 
  follow this MS recommendation, http://msdn.microsoft.com/en-us/ms182161.aspx
- Patch from Phill L. to seal the Version class and rename Version.GetVersionString() 
  to a VersionString property. Fix the examples to use the Version.VersionString 
  property.
- Patch from Phill L. to add pcap_freecode() and free memory allocated by 
  pcap_compile(). Fixes a small memory leak from each call to PcapDevice.SetFilter()
- Fix SharpPcap.dll.config to remove the .dll extension after the pcap library name 
  change from wpcap.dll to wpcap.
- Patch from Phill L. to consistently use the PCAP_DLL const string instead of 
  specifying the library name explicitly. Change library from wpcap.dll to wpcap, 
  Windows should append .dll to the library name as the name contains no other '.' 
  characters.
- Integrated patch from Phill L. to prevent creation of the ChecksumUtils class, all 
  methods are static, and prevent inheriting from the class. Fix a potential overflow 
  issue by using only MemoryStream variables in a limit check.
- Remove TCPPacket.TcpHeaderLength, we already have TCPPacket.TCPHeaderLength
- Integrated patch from Phill L, Lucid Communications, LLC. to fix a null pointer 
  exception that occurs with the PcapHandler() callback from pcap/winpcap.
  
  The crash is due to C# using stdcall calling convention by default and c/c++ using 
  cdecl calling convention by default. These calling conventions are the same for 
  parameters passed to the handler, so the call to PcapHandler() delegate should 
  result in the handler being called properly, returning from the handler is another 
  story.

  Because cdecl requires that the caller cleanup the stack but stdcall requires the
  callee cleanup the stack, the default c# stdcall function would result in stack
  corruption, although the return value in EAX should be passed correctly. This would
  explain observed behavior in the code that notes that the first call works but
  subsequent calls fail, this is due to the stack being corrupted upon the return of
  the first call. The fix is to add a method attribute to set cdecl calling 
  convention.
- Remove error masking from TCPPacket.TCPData set accessor by switching to using a 
  straight Array.Copy()
- Fix issues with TCPPacket.TCPData not returning the correct data
    - Fix TCPPacket.PayloadDataLength, should be (IPPayloadLength - TCPHeaderLength),
      not just (IPPayloadLength)
    - Rewrite and fix TCPPacket.SetData() to perform a single byte[] allocation when 
      building the new TCPPacket, this should improve performance. Stop SetData() from 
      altering the TCPHeaderLength, we are only changing the data. Use the correct 
      value when setting the IPPayloadLength.
    - Add a TCPPacketTest test that reads a pcap capture file that contains a TCP 
      packet with a few extra bytes at the end and verifies that the TCPData is 
      correctly returned with a length of zero. Test fails without above fixes.

v2.0.2 - 20090227
- Rename some methods, accessors and variables to remove the 'Pcap' prefix.
  It doesn't seem useful to keep this prefix since the classes and assembly are
  clearly named as being SharpPcap or Pcap.
- API breaking changes due to renaming (there are others that aren't in
  this list)
    * PcapDevice.PcapOpen()          -> PcapDevice.Open()
    * PcapDevice.PcapClose()         -> PcapDevice.Close()
    * PcapDevice.PcapOpened          -> PcapDevice.Opened
    * PcapDevice.PcapStarted         -> PcapDevice.Started
    * PcapDevice.PcapDescription     -> PcapDevice.Description
    * PcapDevice.PcapName            -> PcapDevice.Name
    * PcapDevice.PcapStartCapture()  -> PcapDevice.StartCapture()
    * PcapDevice.PcapCapture()       -> PcapDevice.Capture()
    * PcapDevice.PcapStopCapture()   -> PcapDevice.StopCapture()
    * PcapDevice.PcapGetNextPacket() -> PcapDevice.GetNextPacket()
    * PcapDevice.PcapSetFilter()     -> PcapDevice.SetFilter()
    * PcapDevice.PcapSendPacket()    -> PcapDevice.SendPacket()

- Added PcapDevice.Addresses, this goes along with PcapDevice.Name, .Description and
  .Flags to provide visibility into the PcapDevice's underlying PcapInterface
- Added accessor, PcapDevice.Interface, to enable the user to retrieve the PcapDevice's
  interface. Enables user to get the ip/hardware/etc addresses that the PcapDevice is
  associated with. Suggestion by Riyaz Ahemed.
- Integrated a patch from Chris Penrose
    * Re-enable checksumming for UDP
    * Remove duplicate IPPacket.IpHeaderLength property, switch code to use the 
      existing IPPacket.IPHeaderLength property
    * Add additional checks to EthernetPacketTest.cs
    * Improve IPv6Packet test to be easier to extend packet checking
- Added comparison to known checksum values, extracted from wireshark, to 
  IPv6PacketTest.TCPChecksumIPv6
- Integrated a patch from Tamir Gal
    * Fixes IPv4 and IPv6 checksumming and adds unit test case for IPv6 checksum
    * Int64RangeTest cases
    * The ability to create an IPPacket from scratch
    * Simplifies the OnesComplement code
    * Re-enabled the checksum tests in PacketsTest.cs
- Remove unnecessary stuff from the SharpPcap namespace by hiding the 
  PcapUnmanagedStructures by moving from a namespace of 
  SharpPcap.PcapUnmanagedStructures to putting the structures inside of an internal 
  class named PcapUnmanagedStructures. Switch some methods from public to internal so 
  they are hidden like the unmanaged structures now are.
- Improve PcapAddress by introducing a Sockaddr container class. Enables handling of 
  hardware addresses that were previously confused and parsed as IP addresses and also 
  resolves a user reported issue with unknown sockaddr.sa_family of 0 by treating this 
  case as unknown.
- Refactor checksumming code into Packets/Util/ChecksumUtils.cs
- Set 'svn propset svn:eol-style native' on all .cs files so we don't have line ending 
  conflicts between Windows and Linux.
- Have ToColoredString() and ToColoredVerboseString() overrides call the base 
  instances of the same methods. This ensures that full output is produced from each 
  packet.
- Introduced 'struct sockaddr_in' and modified Pcap.GetPcapAddress() to use sockaddr_in 
  for IPv4 addresses. Previously the code was incorrectly attempting to extract the
  address from the sockaddr directly. Fixes a user 
  reported bug where IPv4 addresses are displayed incorrectly from PcapDevice.ToString().
- Modifed 'struct pcap_pkthdr' to contain a proper 'struct timeval'. Fixes a bug where
  64 bit platforms would see crashes when reading packets from a PcapOfflineDevice. Crash
  was due to a segfault because the pcap_pkthdr size differed from that of the platform and
  the packet size was coming back as some large and invalid value. The subsequent
  marshalling of the packet data would be out of the range of data and would 
  produce the segfault.
- Fixed a few of the examples in the html documentation.

v2.0.1 - 20090207
- Upgraded the example projects to VS2008 format
- Added the example projects to the main solution so the examples are built along with
  the SharpPcap assembly and the unit tests
- Fixed compile errors in the examples due to the large number of changes in the library
- Removed the no longer needed Examples/SharpPcap.sln and the old assembly dll file
- Added some svn:ignore entries to Example directories to keep the svn status output clean
- Removed the IPAddressList class. Much of this functionality is unused.
- Removed some unused methods of the Convert class
- Removed unused PcapDevice.m_ip member variable and accessor
- Removed unnecessary Packets/SupportClass.cs
- Moved TypesOfService_Fields into IPv4Packet as this field is IPv4 specific. Removed 
  Packets/TypesOfService.cs
- Renamed 'public struct EthernetProtocols_Fields' to 'public struct EtherType' and moved
  the struct inside of class EthernetPacket for better encapsulation. Removed
  EthernetProtocols.cs and EthernetProtocol.cs.
- Move 'public struct IPVersions_Fields' into IPPacket.cs and rename to
  'public enum IPVersions'. Remove now empty IPVersions.cs

v2.0.0 - 20090205
- Renamed the Tamir.IPLib namespace to SharpPcap to match the name of the assembly
- Added Mono support
- Standardize on using System.Net.IPAddress to represent IP addresses instead of a mix
  of strings and long values
- Upgraded project files to VS2008 format
- Use System.Collections.Generic List<> instead of type-specific classes. Remove the
  type specific classes.
- Added test for parsing of Ethernet packets
- Removed SharpPcap.Packets.IPAddress class
- Implemented IPv6 support in IPPacket with the help of a patch from David Bond.
- Fixed access of freed memory by fully processing pcap devices
- Removed several unused classes, files and tests
